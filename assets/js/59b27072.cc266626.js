"use strict";(self.webpackChunkkubewarden_docusaurus=self.webpackChunkkubewarden_docusaurus||[]).push([[8037],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=r,y=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(y,i(i({ref:n},c),{},{components:t})):a.createElement(y,i({ref:n},c))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1889:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_label:"Policy Reports",title:"Audit Scanner - Policy Reports"},i="Policy Reports",s={unversionedId:"explanations/audit-scanner/policy-reports",id:"explanations/audit-scanner/policy-reports",title:"Audit Scanner - Policy Reports",description:"When using the Kubewarden Audit Scanner, the results of the policy scans are",source:"@site/docs/explanations/audit-scanner/policy-reports.md",sourceDirName:"explanations/audit-scanner",slug:"/explanations/audit-scanner/policy-reports",permalink:"/explanations/audit-scanner/policy-reports",draft:!1,editUrl:"https://github.com/kubewarden/docs/edit/main/docs/explanations/audit-scanner/policy-reports.md",tags:[],version:"current",lastUpdatedAt:1694600939,formattedLastUpdatedAt:"Sep 13, 2023",frontMatter:{sidebar_label:"Policy Reports",title:"Audit Scanner - Policy Reports"},sidebar:"docs",previous:{title:"Limitations",permalink:"/explanations/audit-scanner/limitations"},next:{title:"PSP migration",permalink:"/tasksDir/psp-migration"}},p={},l=[{value:"Cluster-Wide Audit Results example",id:"cluster-wide-audit-results-example",level:2},{value:"Namespace-Specific Audit Results example",id:"namespace-specific-audit-results-example",level:2}],c={toc:l},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"policy-reports"},"Policy Reports"),(0,r.kt)("p",null,"When using the Kubewarden Audit Scanner, the results of the policy scans are\nstored using the\n",(0,r.kt)("a",{parentName:"p",href:"https://htmlpreview.github.io/?https://github.com/kubernetes-sigs/wg-policy-prototypes/blob/master/policy-report/docs/index.html"},"PolicyReport"),"\nCustom Resource."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Note that the PolicyReport CRDs are under development in the ",(0,r.kt)("inlineCode",{parentName:"p"},"wg-policy"),"\nKubernetes group. Therefore, this documentation can be out of date if a new\nversion of the CRDs is released."),(0,r.kt)("p",{parentName:"admonition"},"Check the ",(0,r.kt)("inlineCode",{parentName:"p"},"wg-policy")," group\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubernetes-sigs/wg-policy-prototypes"},"repository")," for\nmore information about the CRDs.")),(0,r.kt)("p",null,"These CRDs provide a structured way to store and manage the audit results."),(0,r.kt)("p",null,"Each namespace scanned by the audit scanner will have a dedicated\n",(0,r.kt)("inlineCode",{parentName:"p"},"PolicyReport")," resource defined inside of it."),(0,r.kt)("p",null,"The results of Cluster wide resources are going to be found inside of a\n",(0,r.kt)("inlineCode",{parentName:"p"},"ClusterPolicyReport")," object. There is going to be only one\n",(0,r.kt)("inlineCode",{parentName:"p"},"ClusterPolicyReport")," per cluster."),(0,r.kt)("p",null,"The audit results generated by the scanner includes various information, such\nas the policy that was evaluated, the resource being scanned, the result of the\nevaluation (pass, fail, or skip), and a timestamp indicating when the\nevaluation took place. Additionally, you can optionally define severity and\ncategory annotations for your policies."),(0,r.kt)("p",null,"You can also leverage the optional UI provided by the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kyverno/policy-reporter"},"policy-reporter")," open source\nproject for monitoring and observability of the PolicyReport CRDs.\nFurthermore, operators can access the reports via ordinary ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl")," commands."),(0,r.kt)("p",null,"Let's take a look at some example audit results generated by the audit scanner:"),(0,r.kt)("h2",{id:"cluster-wide-audit-results-example"},"Cluster-Wide Audit Results example"),(0,r.kt)("p",null,"In the next example, the audit scanner has evaluated the\n",(0,r.kt)("inlineCode",{parentName:"p"},"cap-testing-cap-policy")," on multiple namespaces in the cluster. The results\nindicate that all the namespaces passed the policy validation. The ",(0,r.kt)("inlineCode",{parentName:"p"},"summary"),"\nsection provides a summary of the audit results, showing there were no\nerrors, failures, or warnings."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: wgpolicyk8s.io/v1beta1\nkind: ClusterPolicyReport\nmetadata:\n  creationTimestamp: "2023-07-10T19:25:40Z"\n  generation: 1\n  labels:\n    app.kubernetes.io/managed-by: kubewarden\n  ...\nresults:\n- policy: cap-testing-cap-policy\n  ...\n  resourceSelector: {}\n  resources:\n  - apiVersion: v1\n    kind: Namespace\n    name: kube-system\n    ...\n  result: pass\n  rule: testing-cap-policy\n  source: kubewarden\n  timestamp:\n    nanos: 0\n    seconds: 1689017140\n- policy: cap-testing-cap-policy\n  ...\n  resourceSelector: {}\n  resources:\n  - apiVersion: v1\n    kind: Namespace\n    name: default\n    ...\n  result: pass\n  rule: testing-cap-policy\n  source: kubewarden\n  timestamp:\n    nanos: 0\n    seconds: 1689017140\n...\nsummary:\n  error: 0\n  fail: 0\n  pass: 6\n  skip: 0\n  warn: 0\n')),(0,r.kt)("h2",{id:"namespace-specific-audit-results-example"},"Namespace-Specific Audit Results example"),(0,r.kt)("p",null,"In this example, the audit scanner has evaluated multiple policies on resources\nwithin the ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," namespace. The results indicate that some of the resources\nfailed the validation for the ",(0,r.kt)("inlineCode",{parentName:"p"},"cap-no-privilege-escalation")," policy, while\nothers passed the validation for the ",(0,r.kt)("inlineCode",{parentName:"p"},"cap-do-not-run-as-root")," policy. The\n",(0,r.kt)("inlineCode",{parentName:"p"},"summary")," section shows a summary of the audit results, indicating the number\nof failures and passes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: wgpolicyk8s.io/v1beta1\nkind: PolicyReport\nmetadata:\n  creationTimestamp: "2023-07-10T19:28:05Z"\n  generation: 4\n  labels:\n    app.kubernetes.io/managed-by: kubewarden\n  ...\nresults:\n- message: one of the containers has privilege escalation enabled\n  policy: cap-no-privilege-escalation\n  ...\n  resourceSelector: {}\n  resources:\n  - apiVersion: apps/v1\n    kind: Deployment\n    name: nginx-deployment\n    namespace: default\n    ...\n  result: fail\n  rule: no-privilege-escalation\n  source: kubewarden\n  timestamp:\n    nanos: 0\n    seconds: 1689017383\n- policy: cap-do-not-run-as-root\n  ...\n  resourceSelector: {}\n  resources:\n  - apiVersion: apps/v1\n    kind: Deployment\n    name: nginx-deployment\n    namespace: default\n    ...\n  result: pass\n  rule: do-not-run-as-root\n  source: kubewarden\n  timestamp:\n    nanos: 0\n    seconds: 1689017383\n...\nsummary:\n  error: 0\n  fail: 8\n  pass: 10\n  skip: 0\n  warn: 0\n')))}d.isMDXComponent=!0}}]);